<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCMP</title>

    <link rel="stylesheet" href="volumes.css">
</head>
<body>
    <div id="main">
        <div id="title"><h1>Volume Management</h1></div>
        <div id="volumes-div">
            <h2>Volumes</h2>
            <table id="volumes-table">
                <tr id="table-first-row">
                    <td>Volume Name</td>
                    <td>Actions</td>
                </tr>
            </table>
        </div>

    </div>
    <script>
        async function loadVolumes() {
            const res = await fetch('/api/volumes');
            const data = await res.json();

            if (data.volumes.length === 0) {
                document.getElementById("volumes-div").innerHTML = '<center>No volumes found.</center>';
                return;
            }

            let volumes = data.volumes;
            let volumes_table = document.getElementById("volumes-table");
            for (let volume of volumes) {
                let tr = document.createElement("tr");
                tr.className = "volume-tr";
                
                let tdName = document.createElement("td");
                tdName.innerHTML = `<span class="vol-name">${volume.name}</span> <span class="vol-size">(size: ${volume.size})</span>`;

                let tdAction = document.createElement("td");
                let delButton = document.createElement("div");
                delButton.innerHTML = "Delete";
                delButton.className = "delButton";
                delButton.style.backgroundColor = "rgb(240, 72, 72)";


                let bkpButton = document.createElement("div");
                bkpButton.innerHTML = "Backup";
                bkpButton.className = "delButton";
                bkpButton.style.backgroundColor = "#3b82f6";

                let renButton = document.createElement("div");
                renButton.innerHTML = "Rename";
                renButton.className = "delButton";
                renButton.style.backgroundColor = "#d99414";

                tr.appendChild(tdName);
                tr.appendChild(tdAction);
                tdAction.appendChild(renButton);
                tdAction.appendChild(bkpButton);
                tdAction.appendChild(delButton);

                renButton.onclick = async () => {
                    const newName = prompt(`Enter new name for volume \"${volume.name}\":`);
                    if (!newName) return;
                    try {
                        const res = await fetch(`/api/volumes/${volume.name}/rename`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ newName })
                        });
                        const data = await res.json();
                        if (data.status === 'ok') {
                            alert(`Renamed to: ${data.newName}`);
                            window.parent.location.reload(true);
                        } else {
                            alert('Rename failed: ' + (data.message || 'Unknown error'));
                        }
                    } catch (e) {
                        alert('Network error');
                    }
                };


                tdName.style.width = "80%";
                tdAction.style.width = "fit-content";

                volumes_table.appendChild(tr);

                bkpButton.onclick = async () => {
                    if (!confirm(`Create backup of volume \"${volume.name}\"?`)) { return; }
                    try {
                        const res = await fetch(`/api/volumes/${volume.name}/backup`, { method: 'POST' });
                        const data = await res.json();
                        if (data.status === 'ok') {
                            alert(`Backup created: ${data.backup}`);
                            window.parent.location.reload(true);
                        } else {
                            alert('Backup failed: ' + (data.message || 'Unknown error'));
                        }
                    } catch (e) {
                        alert('Network error');
                    }
                };

                delButton.onclick = async () => {
                    if (!confirm(`Are you sure you want to delete the volume "${volume.name}"?`)) {
                        return;
                    }

                    try {
                        const res = await fetch(`/api/volumes/${volume.name}`, {
                            method: 'DELETE'
                        });

                        const data = await res.json();
                        window.parent.location.reload(true);
                    } catch (error) {
                    }
                }
            }
        }

        loadVolumes();
    
        </script>
</body>
</html>